# Form implementation generated from reading ui file 'design.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QGraphicsDropShadowEffect, QApplication, QMainWindow
from PyQt6.QtCore import Qt, QObject, pyqtSignal
from __supporting_func import Add_Shadow
from __supporting_func import New_Task_Screen, FrameLess, Control_Buttons, Clock_DateTime
from _Create_Task_Screen import _New_Task
from threading import Thread
from __Backend import ExcelTaskManager
import time
from _View_Task_Screen import _View_Task

class NewTask_Screen(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = _New_Task()
        self.ui.setupUi(self)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground, True)
        FrameLess(self)

class _OPEN_SECOND_WINDOW(QObject):
        finished = pyqtSignal(list)

        def __init__(self, excel_file):
                super().__init__()
                self.second_window = NewTask_Screen()
                self.second_window.show()
                def data_check():
                        while self.second_window.ui.dataSet == []:
                                time.sleep(2)
                        self.finished.emit(self.second_window.ui.dataSet)
                        excel_file.write_data(self.second_window.ui.dataSet)
                        excel_file.save_excel_file()
                        
                self.Time_Thread = Thread(target=lambda: data_check())
                self.Time_Thread.daemon = True
                self.Time_Thread.start()


class ViewTask_Screen(QMainWindow):
    def __init__(self, data):
        super().__init__()
        self.ui = _View_Task(data)
        self.ui.setupUi(self)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground, True)
        FrameLess(self)

class _OPEN_VIEW_TASK_WINDOW(QObject):
        finished = pyqtSignal(dict)

        def __init__(self, data):
                super().__init__()
                self.second_window = ViewTask_Screen(data)
                self.second_window.show()
                
                def data_check():

                        while self.second_window.ui.dataSet == {}:
                                time.sleep(2)
                        time.sleep(1)
                        self.finished.emit(self.second_window.ui.dataSet)
 
                self.Time_Thread = Thread(target=lambda: data_check())
                self.Time_Thread.daemon = True
                self.Time_Thread.start()
                
class Ui_MainWindow(object):
    def __init__(self, app=None):
        self.app = app
        self.ctrl_btns = Control_Buttons(app)
        self.Clock_DateTime = Clock_DateTime()
        self.pending_tasks_widgets = {}
        self.completed_task_widgets = {}
        self.ROWS_COUNT = []
        self.pend_Task_Data = ExcelTaskManager("./resources/Tasks.xlsx").read_all_rows()
        self.com_Task_Data = ExcelTaskManager("./resources/completed.xlsx").read_all_rows()     

    def open_second_window(self):
        def refresh(data):
                self.pend_Task_Data.append(data)
                
                def refresh_records_thread():
                        self._RESET_ALL_DYNAMIC_WIDGETS("pen_tasks")
                        self.DYNAMIC_TASK_DATA(refresh_section="pen_tasks")
                        
                add_row_thread = Thread(target=refresh_records_thread())
                add_row_thread.daemon = True
                add_row_thread.start()
                
        self.data_thread = _OPEN_SECOND_WINDOW(ExcelTaskManager("./resources/Tasks.xlsx"))
        self.data_thread.finished.connect(refresh)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 796)
        MainWindow.setMaximumSize(QtCore.QSize(1200, 16777215))
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Img_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.Img_label.setGeometry(QtCore.QRect(0, 0, 1200, 800))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Img_label.sizePolicy().hasHeightForWidth())
        self.Img_label.setSizePolicy(sizePolicy)
        self.Img_label.setMinimumSize(QtCore.QSize(1200, 800))
        self.Img_label.setMaximumSize(QtCore.QSize(1200, 800))
        self.Img_label.setText("")
        self.Img_label.setPixmap(QtGui.QPixmap("./images/DashBoard.png"))
        self.Img_label.setObjectName("Img_label")

        self.create_btn_dash = QtWidgets.QPushButton(parent=self.centralwidget)
        self.create_btn_dash.setGeometry(QtCore.QRect(669, 690, 101, 40))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.create_btn_dash.sizePolicy().hasHeightForWidth())
        self.create_btn_dash.setSizePolicy(sizePolicy)
        self.create_btn_dash.setMinimumSize(QtCore.QSize(0, 40))
        self.create_btn_dash.setMaximumSize(QtCore.QSize(150, 40))
        self.create_btn_dash.setGraphicsEffect(Add_Shadow())
        self.create_btn_dash.clicked.connect(lambda: self.open_second_window())
        self.create_btn_dash.setStyleSheet("#create_btn_dash{\n"
        "width:100px;\nfont-size:15px;\nfont-weight:normal;\nbackground-color:black;\ncolor:white;\n"
        "margin-bottom:5px;\nborder-radius:10px;\n}\n"
        "#create_btn_dash:hover{\nborder:2px solid black;\nwidth:120px;\nfont-size:17px;\n}")
        self.create_btn_dash.setAutoDefault(False)
        self.create_btn_dash.setDefault(True)
        self.create_btn_dash.setFlat(False)
        self.create_btn_dash.setObjectName("create_btn_dash")
        self.UserName = QtWidgets.QLabel(parent=self.centralwidget)
        self.UserName.setGeometry(QtCore.QRect(290, 80, 261, 21))
        self.UserName.setStyleSheet("font-size:28px;\nfont-weight:bold;\nfont-family:Arial;\n"
        "color:white;\nbackground-color:transparent;")
        self.UserName.setObjectName("UserName")

        self.closeBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.closeBtn.setGeometry(QtCore.QRect(1175, 3, 21, 23))
        self.closeBtn.setStyleSheet("#closeBtn{\nborder-radius:5px;\n}\n#closeBtn:hover{\nbackground-color:red;\n}")
        self.closeBtn.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/Users/Hammad Rafique/Downloads/icons8-close-100.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.closeBtn.setIcon(icon)
        self.closeBtn.setObjectName("closeBtn")
        self.closeBtn.clicked.connect(lambda: self.ctrl_btns.close_window())

        self.maximizeBtn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.maximizeBtn.setGeometry(QtCore.QRect(1152, 3, 21, 23))
        self.maximizeBtn.setStyleSheet("#maximizeBtn{\nborder-radius:5px;\n"
        "background-color:transparent;\n}\n"
        "#maximizeBtn:hover{\nbackground-color:#A84ECF;\n}")
        self.maximizeBtn.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("C:/Users/Hammad Rafique/Downloads/icons8-maximize-100.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.maximizeBtn.setIcon(icon1)
        self.maximizeBtn.setIconSize(QtCore.QSize(14, 14))
        self.maximizeBtn.setObjectName("maximizeBtn")
                
        self.mini_Btn = QtWidgets.QPushButton(parent=self.centralwidget)
        self.mini_Btn.setGeometry(QtCore.QRect(1130, 3, 21, 23))
        self.mini_Btn.clicked.connect(lambda: self.ctrl_btns.minimize_window())
        self.mini_Btn.setStyleSheet("\n"
        "#mini_Btn{\nborder-radius:5px;\nbackground-color:transparent;\n}\n"
        "#mini_Btn:hover{\nbackground-color:#A84ECF;\n}")
        self.mini_Btn.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("C:/Users/Hammad Rafique/Downloads/icons8-minimize-100.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.mini_Btn.setIcon(icon2)
        self.mini_Btn.setIconSize(QtCore.QSize(12, 12))
        self.mini_Btn.setObjectName("mini_Btn")
        self.clock_time = QtWidgets.QLabel(parent=self.centralwidget)
        self.clock_time.setGeometry(QtCore.QRect(1040, 90, 101, 16))
        self.clock_time.setStyleSheet("font-size:11pt;\ncolor:white;")
        self.clock_time.setObjectName("clock_time")
        self.clock_date = QtWidgets.QLabel(parent=self.centralwidget)
        self.clock_date.setGeometry(QtCore.QRect(970, 111, 171, 16))
        self.clock_date.setStyleSheet("font-size:11pt;\ncolor:white;")
        
        def change_time():
                while True:
                        try: self.clock_time.setText(self.Clock_DateTime.GET_CURRENT_TIME())
                        except: pass

        self.Time_Thread = Thread(target=lambda: change_time())
        self.Time_Thread.daemon = True
        self.Time_Thread.start()
        
        self.clock_date.setObjectName("clock_date")
        self.total_com_task = QtWidgets.QLabel(parent=self.centralwidget)
        self.total_com_task.setGeometry(QtCore.QRect(420, 120, 121, 16))
        self.total_com_task.setStyleSheet("font-size:11pt;\ncolor:white;")
        self.total_com_task.setObjectName("total_com_task")
        self.total_pen_task = QtWidgets.QLabel(parent=self.centralwidget)
        self.total_pen_task.setGeometry(QtCore.QRect(420, 140, 121, 16))
        self.total_pen_task.setStyleSheet("font-size:11pt;\ncolor:white;")
        self.total_pen_task.setObjectName("total_pen_task")

        self.scrollArea = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(80, 300, 720, 441))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(60)
        sizePolicy.setHeightForWidth(self.scrollArea.sizePolicy().hasHeightForWidth())
        self.scrollArea.setSizePolicy(sizePolicy)
        self.scrollArea.setMinimumSize(QtCore.QSize(720, 200))
        self.scrollArea.setMaximumSize(QtCore.QSize(0, 600))
        self.scrollArea.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.scrollArea.setStyleSheet("border-radius:5px;\n"
        "background-color:transparent;\n")
        self.scrollArea.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.SizeAdjustPolicy.AdjustToContents)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeading|QtCore.Qt.AlignmentFlag.AlignLeft|QtCore.Qt.AlignmentFlag.AlignTop)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 720, 441))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollAreaWidgetContents.sizePolicy().hasHeightForWidth())
        self.scrollAreaWidgetContents.setSizePolicy(sizePolicy)
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.scrollArea_2 = QtWidgets.QScrollArea(parent=self.centralwidget)
        self.scrollArea_2.setGeometry(QtCore.QRect(850, 300, 271, 441))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.scrollArea_2.sizePolicy().hasHeightForWidth())
        self.scrollArea_2.setSizePolicy(sizePolicy)
        self.scrollArea_2.setStyleSheet("background-color:transparent;\nborder:0px")
        self.scrollArea_2.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.completed_task_scroll_area_widget = QtWidgets.QWidget()
        self.completed_task_scroll_area_widget.setGeometry(QtCore.QRect(0, 0, 271, 441))
        self.completed_task_scroll_area_widget.setObjectName("completed_task_scroll_area_widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.completed_task_scroll_area_widget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.scrollArea_2.setWidget(self.completed_task_scroll_area_widget)
        
        self.DYNAMIC_TASK_DATA()
        self.Img_label.raise_()
        self.closeBtn.raise_()
        self.maximizeBtn.raise_()
        self.mini_Btn.raise_()
        self.UserName.raise_()
        self.clock_time.raise_()
        self.clock_date.raise_()
        self.total_com_task.raise_()
        self.total_pen_task.raise_()
        self.scrollArea.raise_()
        self.create_btn_dash.raise_()
        self.scrollArea_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)    

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def Frame_Clicked(instance, val, record, self):
            
        def complete_records_thread(args="all"):
                        self._RESET_ALL_DYNAMIC_WIDGETS(args)
                        self.DYNAMIC_TASK_DATA(args)
                                
        def refresh(data):
                if "complete" in data.keys():
                        self.com_Task_Data.append(record[val])
                        self.pend_Task_Data.pop(val)
                                
                        add_com_task_thread = Thread(target=complete_records_thread())
                        add_com_task_thread.daemon = True
                        add_com_task_thread.start()
                        # self.ADD_COMPLETED_ROW(data["complete"])
                        
                elif "update" in data.keys():
                        self.pend_Task_Data.pop(self.pend_Task_Data.index(data["update"][0]))
                        self.pend_Task_Data.append(data["update"])
                        
                        add_com_task_thread = Thread(target=complete_records_thread(args="pen_tasks"))
                        add_com_task_thread.daemon = True
                        add_com_task_thread.start()   

                elif "delete" in data.keys():
                        print(data["delete"])
                        self.pend_Task_Data.pop(self.pend_Task_Data.index(data["delete"]))
        
                        add_com_task_thread = Thread(target=complete_records_thread(args="pen_tasks"))
                        add_com_task_thread.daemon = True
                        add_com_task_thread.start() 
                else: print("SomeThing Else ..")
        try:                         
                Vew_Task_Thread =_OPEN_VIEW_TASK_WINDOW(record[val])
                Vew_Task_Thread.finished.connect(refresh)
        except Exception as e: print(e)
                      
    def DYNAMIC_TASK_DATA(self, refresh_section="all"):
        
        def Implement_Pending_Tasks():
                pend_tasks = self.pend_Task_Data
                if pend_tasks != False and pend_tasks != [] and [None, None, None, None, None] not in pend_tasks:
                        task_rows = loop_val = 0
                        if len(pend_tasks) < 12: task_rows, loop_val = len(pend_tasks), 12 
                        else: task_rows = loop_val = len(pend_tasks)
                        self.ROWS_COUNT.append((task_rows, loop_val))
                        
                        for i in range(0, loop_val):  
                                data = i   
                                self.pending_tasks_widgets[i] =  [QtWidgets.QFrame(parent=self.scrollAreaWidgetContents), []]
                                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
                                sizePolicy.setHorizontalStretch(0)
                                sizePolicy.setVerticalStretch(0)
                                sizePolicy.setHeightForWidth(self.pending_tasks_widgets[i][0].sizePolicy().hasHeightForWidth())
                                self.pending_tasks_widgets[i][0].setSizePolicy(sizePolicy)
                                self.pending_tasks_widgets[i][0].setMinimumSize(QtCore.QSize(700, 35))
                                self.pending_tasks_widgets[i][0].setStyleSheet("margin:5px 0px 0px 5px;\n")
                                self.pending_tasks_widgets[i][0].setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
                                self.pending_tasks_widgets[i][0].setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
                                self.pending_tasks_widgets[i][0].setObjectName("frame_10")
                                self.pending_tasks_widgets[i][0].mousePressEvent = lambda event, data=data, records=self.pend_Task_Data: self.Frame_Clicked(data, records, self)

                                # Label 1
                                if i <= task_rows-1:
                                        self.pending_tasks_widgets[i][1].append( QtWidgets.QLabel(parent=self.pending_tasks_widgets[i][0]))
                                        self.pending_tasks_widgets[i][1][0].setGeometry(QtCore.QRect(10, 0, 361, 35))
                                        self.pending_tasks_widgets[i][1][0].setMinimumSize(QtCore.QSize(0, 35))
                                        self.pending_tasks_widgets[i][1][0].setStyleSheet("font-size:10pt;\n"
                                        "color:#555257;\n")
                                        self.pending_tasks_widgets[i][1][0].setObjectName("label_31")

                                        # Label 2
                                        self.pending_tasks_widgets[i][1].append(QtWidgets.QLabel(parent=self.pending_tasks_widgets[i][0]))
                                        self.pending_tasks_widgets[i][1][1].setGeometry(QtCore.QRect(370, 0, 91, 35))
                                        self.pending_tasks_widgets[i][1][1].setMinimumSize(QtCore.QSize(0, 35))
                                        self.pending_tasks_widgets[i][1][1].setStyleSheet("font-size:10pt;\n"
                                        "color:#555257;\n")
                                        self.pending_tasks_widgets[i][1][1].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                                        self.pending_tasks_widgets[i][1][1].setObjectName("label_32")

                                        # Label 3
                                        self.pending_tasks_widgets[i][1].append( QtWidgets.QLabel(parent=self.pending_tasks_widgets[i][0]))
                                        self.pending_tasks_widgets[i][1][2].setGeometry(QtCore.QRect(460, 0, 131, 35))
                                        self.pending_tasks_widgets[i][1][2].setMinimumSize(QtCore.QSize(0, 35))
                                        self.pending_tasks_widgets[i][1][2].setStyleSheet("font-size:10pt;\n"
                                        "color:#555257;\n")
                                        self.pending_tasks_widgets[i][1][2].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                                        self.pending_tasks_widgets[i][1][2].setObjectName("label_34")

                                        # Label 4
                                        self.pending_tasks_widgets[i][1].append(QtWidgets.QLabel(parent=self.pending_tasks_widgets[i][0]))
                                        self.pending_tasks_widgets[i][1][3].setGeometry(QtCore.QRect(590, 0, 111, 35))
                                        self.pending_tasks_widgets[i][1][3].setMinimumSize(QtCore.QSize(0, 35))
                                        self.pending_tasks_widgets[i][1][3].setStyleSheet("font-size:10pt;\n"
                                        "color:#555257;\n"
                                        "")
                                        self.pending_tasks_widgets[i][1][3].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                                        self.pending_tasks_widgets[i][1][3].setObjectName("label_35")

                                self.verticalLayout.addWidget(self.pending_tasks_widgets[i][0])
                
                self.scrollAreaWidgetContents.update()
                self.verticalLayout.update()
                self.scrollArea.update()
        
        def Implement_Completed_Tasks():
                if self.com_Task_Data != False and self.com_Task_Data != [] and [None, None, None, None, None] not in self.com_Task_Data:
                        if len(self.com_Task_Data) < 12: com_task_rows, com_loop_val = len(self.com_Task_Data), 12 
                        else: com_task_rows = com_loop_val = len(self.com_Task_Data)
                        self.ROWS_COUNT.append((com_task_rows, com_loop_val))
                        
                        for i in range(0, com_loop_val):
                                self.completed_task_widgets[i] = [QtWidgets.QFrame(parent=self.completed_task_scroll_area_widget), []]
                                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
                                sizePolicy.setHorizontalStretch(0)
                                sizePolicy.setVerticalStretch(0)
                                sizePolicy.setHeightForWidth(self.completed_task_widgets[i][0].sizePolicy().hasHeightForWidth())
                                self.completed_task_widgets[i][0].setSizePolicy(sizePolicy)
                                self.completed_task_widgets[i][0].setMinimumSize(QtCore.QSize(250, 35))
                                self.completed_task_widgets[i][0].setMaximumSize(QtCore.QSize(250, 35))
                                self.completed_task_widgets[i][0].setStyleSheet("margin:5px 0px 0px 5px;\n")
                                self.completed_task_widgets[i][0].setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
                                self.completed_task_widgets[i][0].setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
                                self.completed_task_widgets[i][0].setObjectName("frame_9")

                                # Image Label 1
                                if i <= com_task_rows-1:
                                        self.completed_task_widgets[i][1].append( QtWidgets.QLabel(parent=self.completed_task_widgets[i][0]))
                                        self.completed_task_widgets[i][1][0].setGeometry(QtCore.QRect(10, 2, 30, 30))
                                        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
                                        sizePolicy.setHorizontalStretch(0)
                                        sizePolicy.setVerticalStretch(0)
                                        sizePolicy.setHeightForWidth(self.completed_task_widgets[i][1][0].sizePolicy().hasHeightForWidth())
                                        self.completed_task_widgets[i][1][0].setSizePolicy(sizePolicy)
                                        self.completed_task_widgets[i][1][0].setMinimumSize(QtCore.QSize(30, 30))
                                        self.completed_task_widgets[i][1][0].setMaximumSize(QtCore.QSize(30, 30))
                                        self.completed_task_widgets[i][1][0].setStyleSheet("border:0px")
                                        self.completed_task_widgets[i][1][0].setText("")
                                        # self.completed_task_widgets[i][1][0].setPixmap(QtGui.QPixmap("C:/Users/Hammad Rafique/Downloads/icons8-tick-100.png"))
                                        self.completed_task_widgets[i][1][0].setScaledContents(True)
                                        self.completed_task_widgets[i][1][0].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
                                        self.completed_task_widgets[i][1][0].setWordWrap(False)
                                        self.completed_task_widgets[i][1][0].setObjectName("label_89")

                                        # Label 2
                                        self.completed_task_widgets[i][1].append( QtWidgets.QLabel(parent=self.completed_task_widgets[i][0]))
                                        self.completed_task_widgets[i][1][1].setGeometry(QtCore.QRect(50, -3, 200, 35))
                                        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
                                        sizePolicy.setHorizontalStretch(0)
                                        sizePolicy.setVerticalStretch(0)
                                        sizePolicy.setHeightForWidth(self.completed_task_widgets[i][1][1].sizePolicy().hasHeightForWidth())
                                        self.completed_task_widgets[i][1][1].setSizePolicy(sizePolicy)
                                        self.completed_task_widgets[i][1][1].setMinimumSize(QtCore.QSize(200, 35))
                                        self.completed_task_widgets[i][1][1].setMaximumSize(QtCore.QSize(180, 35))
                                        font = QtGui.QFont()
                                        font.setPointSize(10)
                                        self.completed_task_widgets[i][1][1].setFont(font)
                                        self.completed_task_widgets[i][1][1].setStyleSheet("font-size:10pt;\n""color:#555257;\n""border:0px;\n")
                                        self.completed_task_widgets[i][1][1].setObjectName("label_90")
                                self.verticalLayout_2.addWidget(self.completed_task_widgets[i][0])
                
                self.completed_task_scroll_area_widget.update()
                self.verticalLayout_2.update()
                self.scrollArea_2.update()
        
        if refresh_section == "all":
                Implement_Pending_Tasks()
                Implement_Completed_Tasks()
        elif refresh_section == "pen_tasks": Implement_Pending_Tasks()
        elif refresh_section == "com_tasks": Implement_Completed_Tasks()
        else: pass
        
        self.Set_Content(refresh_section)  
           
#     def ADD_TASK_ROW(self, data):
#         temp1, temp2 = self.ROWS_COUNT[0][0], self.ROWS_COUNT[0][1]
#         if temp1 == temp2: 
#                 self.pending_tasks_widgets[temp1][0].setParent(None)
#                 self.pending_tasks_widgets[temp1][0].deleteLater()
                
#                 self.pending_tasks_widgets[temp1] =  [QtWidgets.QFrame(parent=self.scrollAreaWidgetContents), []]
#                 sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
#                 sizePolicy.setHorizontalStretch(0)
#                 sizePolicy.setVerticalStretch(0)
#                 sizePolicy.setHeightForWidth(self.pending_tasks_widgets[temp1][0].sizePolicy().hasHeightForWidth())
#                 self.pending_tasks_widgets[temp1][0].setSizePolicy(sizePolicy)
#                 self.pending_tasks_widgets[temp1][0].setMinimumSize(QtCore.QSize(700, 35))
#                 self.pending_tasks_widgets[temp1][0].setStyleSheet("margin:5px 0px 0px 5px;\n")
#                 self.pending_tasks_widgets[temp1][0].setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
#                 self.pending_tasks_widgets[temp1][0].setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
#                 self.pending_tasks_widgets[temp1][0].setObjectName("frame_10")
                
#         if temp1 < temp2 or temp1 == temp2:
#                 self.pending_tasks_widgets[temp1][1].append( QtWidgets.QLabel(parent=self.pending_tasks_widgets[temp1][0]))
#                 self.pending_tasks_widgets[temp1][1][0].setGeometry(QtCore.QRect(10, 0, 361, 35))
#                 self.pending_tasks_widgets[temp1][1][0].setMinimumSize(QtCore.QSize(0, 35))
#                 self.pending_tasks_widgets[temp1][1][0].setText(data[0])
#                 self.pending_tasks_widgets[temp1][1][0].setStyleSheet("font-size:10pt;\n"
#                 "color:#555257;\n")
#                 self.pending_tasks_widgets[temp1][1][0].setObjectName("label_31")
#                 # Label 2
#                 self.pending_tasks_widgets[temp1][1].append(QtWidgets.QLabel(parent=self.pending_tasks_widgets[temp1][0]))
#                 self.pending_tasks_widgets[temp1][1][1].setGeometry(QtCore.QRect(370, 0, 91, 35))
#                 self.pending_tasks_widgets[temp1][1][1].setMinimumSize(QtCore.QSize(0, 35))
#                 self.pending_tasks_widgets[temp1][1][1].setText(data[3])
#                 self.pending_tasks_widgets[temp1][1][1].setStyleSheet("font-size:10pt;\n"
#                 "color:#555257;\n")
#                 self.pending_tasks_widgets[temp1][1][1].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
#                 self.pending_tasks_widgets[temp1][1][1].setObjectName("label_32")
#                 self.pending_tasks_widgets[temp1][1][1].raise_()
#                 # Label 3
#                 self.pending_tasks_widgets[temp1][1].append( QtWidgets.QLabel(parent=self.pending_tasks_widgets[temp1][0]))
#                 self.pending_tasks_widgets[temp1][1][2].setGeometry(QtCore.QRect(460, 0, 131, 35))
#                 self.pending_tasks_widgets[temp1][1][2].setMinimumSize(QtCore.QSize(0, 35))
#                 self.pending_tasks_widgets[temp1][1][2].setText(data[2])
#                 self.pending_tasks_widgets[temp1][1][2].setStyleSheet("font-size:10pt;\n"
#                 "color:#555257;\n")
#                 self.pending_tasks_widgets[temp1][1][2].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
#                 self.pending_tasks_widgets[temp1][1][2].setObjectName("label_34")
#                 self.pending_tasks_widgets[temp1][1][2].raise_()
#                 # Label 4
#                 self.pending_tasks_widgets[temp1][1].append(QtWidgets.QLabel(parent=self.pending_tasks_widgets[temp1][0]))
#                 self.pending_tasks_widgets[temp1][1][3].setGeometry(QtCore.QRect(590, 0, 111, 35))
#                 self.pending_tasks_widgets[temp1][1][3].setMinimumSize(QtCore.QSize(0, 35))
#                 self.pending_tasks_widgets[temp1][1][3].setText("Pending")
#                 self.pending_tasks_widgets[temp1][1][3].setStyleSheet("font-size:10pt;\n"
#                 "color:#555257;\n")
#                 self.pending_tasks_widgets[temp1][1][3].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
#                 self.pending_tasks_widgets[temp1][1][3].setObjectName("label_35")
#                 self.pending_tasks_widgets[temp1][1][3].raise_()
#                 self.verticalLayout.addWidget(self.pending_tasks_widgets[temp1][0])
        
#         self.scrollAreaWidgetContents.update()
#         self.verticalLayout.update()
#         self.scrollArea.update()
#         self.Set_Content(self.pend_Task_Data, self.com_Task_Data)

#     def ADD_COMPLETED_ROW(self, data):
#         temp1, temp2 = self.ROWS_COUNT[1][0], self.ROWS_COUNT[1][1]
#         if temp1 == temp2: 
#                 print(temp1, temp2, data)
#                 self.completed_task_widgets[temp1] = [QtWidgets.QFrame(parent=self.completed_task_scroll_area_widget), []]
#                 sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
#                 sizePolicy.setHorizontalStretch(0)
#                 sizePolicy.setVerticalStretch(0)
#                 sizePolicy.setHeightForWidth(self.completed_task_widgets[temp1][0].sizePolicy().hasHeightForWidth())
#                 self.completed_task_widgets[temp1][0].setSizePolicy(sizePolicy)
#                 self.completed_task_widgets[temp1][0].setMinimumSize(QtCore.QSize(250, 35))
#                 self.completed_task_widgets[temp1][0].setMaximumSize(QtCore.QSize(250, 35))
#                 self.completed_task_widgets[temp1][0].setStyleSheet("margin:5px 0px 0px 5px;\n")
#                 self.completed_task_widgets[temp1][0].setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
#                 self.completed_task_widgets[temp1][0].setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
#                 self.completed_task_widgets[temp1][0].setObjectName("frame_9")
#                 # self.ROWS_COUNT[1][0] = self.ROWS_COUNT[1][0]
#                 # self.ROWS_COUNT[1][1] = self.ROWS_COUNT[1][1]+1
                
#                 # temp = list(self.ROWS_COUNT[1])
#                 # temp[1] = temp[1]+1
#                 # self.ROWS_COUNT[1] = tuple(temp)
#                 # Image Label 1
#         if temp1 < temp2 or temp1 == temp2:
#                 print("Equal", temp1, temp2, data)
#                 self.completed_task_widgets[temp1][1].append( QtWidgets.QLabel(parent=self.completed_task_widgets[temp1][0]))
#                 self.completed_task_widgets[temp1][1][0].setGeometry(QtCore.QRect(10, 2, 30, 30))
#                 sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
#                 sizePolicy.setHorizontalStretch(0)
#                 sizePolicy.setVerticalStretch(0)
#                 sizePolicy.setHeightForWidth(self.completed_task_widgets[temp1][1][0].sizePolicy().hasHeightForWidth())
#                 self.completed_task_widgets[temp1][1][0].setSizePolicy(sizePolicy)
#                 self.completed_task_widgets[temp1][1][0].setMinimumSize(QtCore.QSize(30, 30))
#                 self.completed_task_widgets[temp1][1][0].setMaximumSize(QtCore.QSize(30, 30))
#                 self.completed_task_widgets[temp1][1][0].setStyleSheet("border:0px")
#                 self.completed_task_widgets[temp1][1][0].setText("")
#                 # self.completed_task_widgets[i][1][0].setPixmap(QtGui.QPixmap("C:/Users/Hammad Rafique/Downloads/icons8-tick-100.png"))
#                 self.completed_task_widgets[temp1][1][0].setScaledContents(True)
#                 self.completed_task_widgets[temp1][1][0].setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
#                 self.completed_task_widgets[temp1][1][0].setWordWrap(False)
#                 self.completed_task_widgets[temp1][1][0].setObjectName("label_89")

#                 # Label 2
#                 self.completed_task_widgets[temp1][1].append( QtWidgets.QLabel(parent=self.completed_task_widgets[temp1][0]))
#                 self.completed_task_widgets[temp1][1][1].setGeometry(QtCore.QRect(50, 0, 200, 35))
#                 sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
#                 sizePolicy.setHorizontalStretch(0)
#                 sizePolicy.setVerticalStretch(0)
#                 sizePolicy.setHeightForWidth(self.completed_task_widgets[temp1][1][1].sizePolicy().hasHeightForWidth())
#                 self.completed_task_widgets[temp1][1][1].setSizePolicy(sizePolicy)
#                 self.completed_task_widgets[temp1][1][1].setMinimumSize(QtCore.QSize(200, 35))
#                 self.completed_task_widgets[temp1][1][1].setMaximumSize(QtCore.QSize(180, 35))
#                 font = QtGui.QFont()
#                 font.setPointSize(10)
#                 self.completed_task_widgets[temp1][1][1].setFont(font)
#                 self.completed_task_widgets[temp1][1][1].setStyleSheet("font-size:10pt;\n""color:#555257;\n""border:0px;\n")
#                 self.completed_task_widgets[temp1][1][1].setObjectName("label_90")
#                 self.verticalLayout_2.addWidget(self.completed_task_widgets[temp1][0])
                
#                 # temp = list(self.ROWS_COUNT[1])
#                 # temp[0] = temp[0]+1
#                 # self.ROWS_COUNT[1] = tuple(temp)
                
#                 self.completed_task_widgets.update()
#                 print("Equal", temp1, temp2, data)
        
#         self.completed_task_scroll_area_widget.update()
#         self.verticalLayout_2.update()
#         self.scrollArea_2.update()
      
    def Set_Content(self, _widget_type="all"):
            
        def Set_Pending_Tasks_Content():
                if self.pend_Task_Data != False and self.pend_Task_Data != []:
                        for index, key in enumerate(self.pending_tasks_widgets.keys()):
                                if index <= len(self.pend_Task_Data)-1:
                                        print("#################", self.pend_Task_Data[index][0])
                                        self.pending_tasks_widgets[key][1][0].setText(self.pend_Task_Data[index][0])
                                        self.pending_tasks_widgets[key][1][1].setText(self.pend_Task_Data[index][3])
                                        self.pending_tasks_widgets[key][1][2].setText(self.pend_Task_Data[index][2])
                                        self.pending_tasks_widgets[key][1][3].setText("Pending")
                        self.total_pen_task.setText(str(len(self.pend_Task_Data)))
                else: self.total_pen_task.setText("0")
        
        def Set_Completed_Tasks_Content():
                if self.com_Task_Data != False and self.com_Task_Data != []:
                        for index, key in enumerate(self.completed_task_widgets.keys()):
                                if index <= len(self.com_Task_Data)-1:
                                        self.completed_task_widgets[key][1][0].setPixmap(QtGui.QPixmap("C:/Users/Hammad Rafique/Downloads/icons8-tick-100.png"))
                                        data = self.com_Task_Data[index][0]
                                        if len(data) >= 26: self.completed_task_widgets[key][1][1].setText(data[:26]+"...")
                                        else: self.completed_task_widgets[key][1][1].setText(data)
                        self.total_com_task.setText(str(len(self.com_Task_Data))) 
                else: self.total_com_task.setText("0")
                
                self.completed_task_scroll_area_widget.update()
                self.verticalLayout_2.update()
                self.scrollArea_2.update()
                
        if _widget_type == "all":
                Set_Pending_Tasks_Content()
                Set_Completed_Tasks_Content()
        elif _widget_type == "pen_tasks": Set_Pending_Tasks_Content()
        elif _widget_type == "com_tasks": Set_Completed_Tasks_Content()
        else: pass
        
    def _RESET_ALL_DYNAMIC_WIDGETS(self, _widget_type="all"):
        
        def _CLEAN_PENDING_TASKS():
                for index, key in enumerate(self.pending_tasks_widgets.keys()):
                        for widget in self.pending_tasks_widgets[key][1]:
                                if widget != None:
                                        widget.setParent(None)
                                        widget.deleteLater()
                        self.pending_tasks_widgets[key][0].setParent(None)
                        self.pending_tasks_widgets[key][0].deleteLater()
                self.pending_tasks_widgets.clear()
        
        def _CLEAN_COMPLETED_TASKS():
                for index, key in enumerate(self.completed_task_widgets.keys()):
                        for widget in self.completed_task_widgets[key][1]:
                                if widget != None:
                                        widget.setParent(None)
                                        widget.deleteLater()
                                        
                        self.completed_task_widgets[key][0].setParent(None)
                        self.completed_task_widgets[key][0].deleteLater()
                self.completed_task_widgets.clear()
        
        if _widget_type == "all":
                _CLEAN_PENDING_TASKS()
                _CLEAN_COMPLETED_TASKS()
        elif _widget_type == "pen_tasks": _CLEAN_PENDING_TASKS()
        elif _widget_type == "com_tasks": _CLEAN_COMPLETED_TASKS()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.create_btn_dash.setText(_translate("MainWindow", "Create"))
        self.UserName.setText(_translate("MainWindow", "Hammad Rafique"))
        self.clock_time.setText(_translate("MainWindow", "7:00:35 Am"))
        self.clock_date.setText(str(Clock_DateTime.GET_CURRENT_DATE()))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(MainWindow)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())